snippet proto "proto"
${1:class_name}.prototype.${2:method_name} =
function(${3:first_argument}) {
	${4:// body...}
};
endsnippet

${1:class_name}.prototype.${2:method_name} =
function(${3:first_argument}) {
	${4:// body...}
};
endsnippet

snippet fun "fun"
function ${1:function_name}(${2:argument}) {
	${3:// body...}
}
endsnippet

function ${1:function_name}(${2:argument}) {
	${3:// body...}
}
endsnippet

snippet f "f"
function(${1}) {
	${3}
}${2:;}
endsnippet

function(${1}) {
	${3}
}${2:;}
endsnippet

snippet (f "(f"
(function(${1}) {
	${3:/* code */}
}(${2}));
endsnippet

(function(${1}) {
	${3:/* code */}
}(${2}));
endsnippet

snippet if "if"
if (${1:true}) {
	${2}
}
endsnippet

if (${1:true}) {
	${2}
}
endsnippet

snippet ife "ife"
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet

if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet

snippet ter "ter"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet switch "switch"
switch (${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet

switch (${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet

snippet case "case"
case '${1:case}':
	${2:// code}
	break;
${3}
endsnippet

case '${1:case}':
	${2:// code}
	break;
${3}
endsnippet

snippet for "for"
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: += 1}) {
	${4:$1[$2]}
}
endsnippet

for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: += 1}) {
	${4:$1[$2]}
}
endsnippet

snippet forr "forr"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
	${4:$1[$2]}
}
endsnippet

for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
	${4:$1[$2]}
}
endsnippet

snippet wh "wh"
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

snippet try "try"
try {
	${1:/* code */}
} catch(${2:e}) {
	${3:/* handle error */}
}
endsnippet

try {
	${1:/* code */}
} catch(${2:e}) {
	${3:/* handle error */}
}
endsnippet

snippet do "do"
do {
	${2:/* code */}
} while (${1:/* condition */});
endsnippet

do {
	${2:/* code */}
} while (${1:/* condition */});
endsnippet

snippet :f ":f"
${1:method_name}: function(${2:attribute}) {
	${4}
}${3:,}
endsnippet

${1:method_name}: function(${2:attribute}) {
	${4}
}${3:,}
endsnippet

snippet timeout "timeout"
setTimeout(function() {${3}}${2}, ${1:10});
endsnippet

setTimeout(function() {${3}}${2}, ${1:10});
endsnippet

snippet get "get"
getElementsBy${1:TagName}('${2}')${3}
endsnippet

getElementsBy${1:TagName}('${2}')${3}
endsnippet

snippet gett "gett"
getElementBy${1:Id}('${2}')${3}
endsnippet

getElementBy${1:Id}('${2}')${3}
endsnippet

snippet cl "cl"
console.log(${1});
endsnippet

console.log(${1});
endsnippet

snippet ret "ret"
return ${1:result}
endsnippet

return ${1:result}
endsnippet

snippet fori "fori"
for (var ${1:prop} in ${2:Things}) {
	${3:$2[$1]}
}
endsnippet

for (var ${1:prop} in ${2:Things}) {
	${3:$2[$1]}
}
endsnippet

snippet has "has"
hasOwnProperty(${1})
endsnippet

hasOwnProperty(${1})
endsnippet

snippet /** "/**"
/**
 * ${1:description}
 *
 */
endsnippet

snippet @par "@par"
@param {${1:type}} ${2:name} ${3:description}
endsnippet

snippet @ret "@ret"
@return {${1:type}} ${2:description}
endsnippet

@return {${1:type}} ${2:description}
endsnippet

snippet jsonp "jsonp"
JSON.parse(${1:jstr});
endsnippet

JSON.parse(${1:jstr});
endsnippet

snippet jsons "jsons"
JSON.stringify(${1:object});
endsnippet

JSON.stringify(${1:object});
endsnippet

snippet sdf "sdf"
var ${1:function_name} = function (${2:argument}) {
	${3:// initial code ...}
	$1 = function ($2) {
		${4:// main code}
	};
}
endsnippet

var ${1:function_name} = function (${2:argument}) {
	${3:// initial code ...}
	$1 = function ($2) {
		${4:// main code}
	};
}
endsnippet

snippet sing "sing"
function ${1:Singleton} (${2:argument}) {
	// the cached instance
	var instance;
	// rewrite the constructor
	$1 = function $1($2) {
		return instance;
	};
	// carry over the prototype properties
	$1.prototype = this;
	// the instance
	instance = new $1();
	// reset the constructor pointer
	instance.constructor = $1;
	${3:// code ...}
	return instance;
}
endsnippet


