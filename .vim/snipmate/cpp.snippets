snippet array "array"
std::array<${1:T}, ${2:N}> ${3};${4}
endsnippet

snippet vector "vector"
std::vector<${1:T}> ${2};${3}
endsnippet

snippet deque "deque"
std::deque<${1:T}> ${2};${3}
endsnippet

snippet flist "flist"
std::forward_list<${1:T}> ${2};${3}
endsnippet

snippet list "list"
std::list<${1:T}> ${2};${3}
endsnippet

snippet set "set"
std::set<${1:T}> ${2};${3}
endsnippet

snippet map "map"
std::map<${1:Key}, ${2:T}> ${3};${4}
endsnippet

snippet mset "mset"
std::multiset<${1:T}> ${2};${3}
endsnippet

snippet mmap "mmap"
std::multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet

snippet uset "uset"
std::unordered_set<${1:T}> ${2};${3}
endsnippet

snippet umap "umap"
std::unordered_map<${1:Key}, ${2:T}> ${3};${4}
endsnippet

snippet umset "umset"
std::unordered_multiset<${1:T}> ${2};${3}
endsnippet

snippet ummap "ummap"
std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet

snippet stack "stack"
std::stack<${1:T}> ${2};${3}
endsnippet

snippet queue "queue"
std::queue<${1:T}> ${2};${3}
endsnippet

snippet pqueue "pqueue"
std::priority_queue<${1:T}> ${2};${3}
endsnippet

snippet pri "pri"
private
endsnippet

snippet pro "pro"
protected
endsnippet

snippet pub "pub"
public
endsnippet

snippet fr "fr"
friend
endsnippet

snippet mu "mu"
mutable
endsnippet

snippet cl "cl"
class ${1:`!v Filename('$1', 'name')`}
{
public:
	$1(${2});
	~$1();
private:
	${3:/* data */}
};
endsnippet

snippet mfun "mfun"
${4:void} ${1:`!v Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${5:/* code */}
}
endsnippet

snippet ns "ns"
namespace ${1:`!v Filename('', 'my')`} {
	${2}
} /* namespace $1 */
endsnippet

snippet cout "cout"
std::cout << ${1} << std::endl;${2}
endsnippet

snippet cin "cin"
std::cin >> ${1};${2}
endsnippet

snippet fori "fori"
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}${5}
endsnippet

snippet fore "fore"
for (${1:auto} ${2:i} : ${3:container}) {
	${4:/* code */}
}${5}
endsnippet

snippet iter "iter"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}${7}
endsnippet

snippet itera "itera"
for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
	${2:std::cout << *$1 << std::endl;}
}${3}
endsnippet

snippet ld "ld"
[${1}](${2}){${3:/* code */}}${4}
endsnippet

snippet lld "lld"
[${1}](${2}){
	${3:/* code */}
}${4}
endsnippet
