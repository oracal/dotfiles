snippet #! "#!"
#!/usr/bin/env perl
endsnippet

#!/usr/bin/env perl
endsnippet

snippet . "."
=>
endsnippet

=>
endsnippet

snippet sub "sub"
sub ${1:function_name} {
	${2:#body ...}
}
endsnippet

sub ${1:function_name} {
	${2:#body ...}
}
endsnippet

snippet if "if"
if (${1}) {
	${2:# body...}
}
endsnippet

if (${1}) {
	${2:# body...}
}
endsnippet

snippet ife "ife"
if (${1}) {
	${2:# body...}
}
else {
	${3:# else...}
}
endsnippet

if (${1}) {
	${2:# body...}
}
else {
	${3:# else...}
}
endsnippet

snippet ifee "ifee"
if (${1}) {
	${2:# body...}
}
elsif (${3}) {
	${4:# elsif...}
}
else {
	${5:# else...}
}
endsnippet

if (${1}) {
	${2:# body...}
}
elsif (${3}) {
	${4:# elsif...}
}
else {
	${5:# else...}
}
endsnippet

snippet xif "xif"
${1:expression} if ${2:condition};${3}
endsnippet

${1:expression} if ${2:condition};${3}
endsnippet

snippet unless "unless"
unless (${1}) {
	${2:# body...}
}
endsnippet

unless (${1}) {
	${2:# body...}
}
endsnippet

snippet xunless "xunless"
${1:expression} unless ${2:condition};${3}
endsnippet

${1:expression} unless ${2:condition};${3}
endsnippet

snippet eval "eval"
local $@;
eval {
	${1:# do something risky...}
};
if (my $e = $@) {
	${2:# handle failure...}
}
endsnippet

local $@;
eval {
	${1:# do something risky...}
};
if (my $e = $@) {
	${2:# handle failure...}
}
endsnippet

snippet wh "wh"
while (${1}) {
	${2:# body...}
}
endsnippet

while (${1}) {
	${2:# body...}
}
endsnippet

snippet xwh "xwh"
${1:expression} while ${2:condition};${3}
endsnippet

${1:expression} while ${2:condition};${3}
endsnippet

snippet cfor "cfor"
for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:# body...}
}
endsnippet

for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:# body...}
}
endsnippet

snippet xfor "xfor"
${1:expression} for @${2:array};${3}
endsnippet

${1:expression} for @${2:array};${3}
endsnippet

snippet for "for"
foreach my $${1:x} (@${2:array}) {
	${3:# body...}
}
endsnippet

foreach my $${1:x} (@${2:array}) {
	${3:# body...}
}
endsnippet

snippet fore "fore"
${1:expression} foreach @${2:array};${3}
endsnippet

${1:expression} foreach @${2:array};${3}
endsnippet

snippet cl "cl"
package ${1:ClassName};
use base qw(${2:ParentClass});
sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}
1;${3}
endsnippet

package ${1:ClassName};
use base qw(${2:ParentClass});
sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}
1;${3}
endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/; open my $file, '<', "${2:file}"; <$file> };
${3}
endsnippet

my $${1:var} = do { local $/; open my $file, '<', "${2:file}"; <$file> };
${3}
endsnippet

snippet strwar "strwar"
use strict;
use warnings;
endsnippet

use strict;
use warnings;
endsnippet

snippet vers "vers"
## no critic
our $VERSION = '${1:version}';
eval $VERSION;
## use critic
endsnippet

## no critic
our $VERSION = '${1:version}';
eval $VERSION;
## use critic
endsnippet

snippet switch "switch"
use feature 'switch';
endsnippet

use feature 'switch';
endsnippet

snippet asub "asub"
sub { 
 	${1:# body }
}
endsnippet

sub { 
 	${1:# body }
}
endsnippet

snippet begin "begin"
BEGIN {
	${1:# begin body}
}
endsnippet

BEGIN {
	${1:# begin body}
}
endsnippet

snippet pkgmv "pkgmv"
__PACKAGE__->${1:package_method}(${2:var})
endsnippet

__PACKAGE__->${1:package_method}(${2:var})
endsnippet

snippet pkgm "pkgm"
__PACKAGE__->${1:package_method}()
endsnippet

__PACKAGE__->${1:package_method}()
endsnippet

snippet pkget "pkget"
__PACKAGE__->get_${1:package_method}()
endsnippet

__PACKAGE__->get_${1:package_method}()
endsnippet

snippet pkgetv "pkgetv"
__PACKAGE__->get_${1:package_method}(${2:var})
endsnippet

__PACKAGE__->get_${1:package_method}(${2:var})
endsnippet

snippet qrx "qrx"
qr/
     ${1:regex}
/xms
endsnippet

qr/
     ${1:regex}
/xms
endsnippet

snippet qr/ "qr/"
qr/${1:regex}/x
endsnippet

qr/${1:regex}/x
endsnippet

snippet given "given"
given ($${1:var}) { 
	${2:# cases}
	${3:# default}
} 
endsnippet

given ($${1:var}) { 
	${2:# cases}
	${3:# default}
} 
endsnippet

snippet when "when"
when (${1:case}) {
	${2:# body}
}
endsnippet

when (${1:case}) {
	${2:# body}
}
endsnippet

snippet hslice "hslice"
@{ ${1:hash}  }{ ${2:array} }
endsnippet

@{ ${1:hash}  }{ ${2:array} }
endsnippet

snippet map "map"
map {  ${2: body }    }  ${1: @array } ;
endsnippet

map {  ${2: body }    }  ${1: @array } ;
endsnippet

snippet ppod "ppod"
=head1 NAME
${1:ClassName} - ${2:ShortDesc}
=head1 SYNOPSIS
  use $1;
  ${3:# synopsis...}
=head1 DESCRIPTION
${4:# longer description...}
=head1 INTERFACE
=head1 DEPENDENCIES
=head1 SEE ALSO
endsnippet

=head1 NAME
${1:ClassName} - ${2:ShortDesc}
=head1 SYNOPSIS
  use $1;
  ${3:# synopsis...}
=head1 DESCRIPTION
${4:# longer description...}
=head1 INTERFACE
=head1 DEPENDENCIES
=head1 SEE ALSO
endsnippet

snippet psub "psub"
=head2 ${1:MethodName}
${2:Summary....}
endsnippet

=head2 ${1:MethodName}
${2:Summary....}
endsnippet

snippet psubi "psubi"
=head2 ${1:MethodName}
${2:Summary...}
=cut
endsnippet

=head2 ${1:MethodName}
${2:Summary...}
=cut
endsnippet

snippet parg "parg"
=over 2
=item
Arguments
=over 3
=item
C<${1:DataStructure}>
  ${2:Sample}
=back
=item
Return
=over 3
=item
C<${3:...return data}>
=back
=back
endsnippet

=over 2
=item
Arguments
=over 3
=item
C<${1:DataStructure}>
  ${2:Sample}
=back
=item
Return
=over 3
=item
C<${3:...return data}>
=back
=back
endsnippet

snippet moosecl "moosecl"
package ${1:ClassName};
use Moose;
#extends '${2:# ParentClass}';
${6:# body of class}
1;
__END__
=head1 NAME
$1 - ${3:ShortDesc}
=head1 SYNOPSIS
${4:# synopsis...}
=head1 DESCRIPTION
${5:# longer description...}
endsnippet

package ${1:ClassName};
use Moose;
#extends '${2:# ParentClass}';
${6:# body of class}
1;
__END__
=head1 NAME
$1 - ${3:ShortDesc}
=head1 SYNOPSIS
${4:# synopsis...}
=head1 DESCRIPTION
${5:# longer description...}
endsnippet

snippet has "has"
has ${1:attribute} => (
	is	=> '${2:ro|rw}',
	isa 	=> '${3:Str|Int|HashRef|ArrayRef|etc}',
	default => ${4:defaultvalue}
	,${5:# other attributes}
);
endsnippet

has ${1:attribute} => (
	is	=> '${2:ro|rw}',
	isa 	=> '${3:Str|Int|HashRef|ArrayRef|etc}',
	default => ${4:defaultvalue}
	,${5:# other attributes}
);
endsnippet

snippet override "override"
override ${1:attribute} => sub {
	${2:# my $self = shift;};
	${3:# my ($self,$args) = @_;};
};
endsnippet

override ${1:attribute} => sub {
	${2:# my $self = shift;};
	${3:# my ($self,$args) = @_;};
};
endsnippet

snippet tuse "tuse"
use Test::More;
use Test::Deep ();
use Test::Exception;
endsnippet

use Test::More;
use Test::Deep ();
use Test::Exception;
endsnippet

snippet tlib "tlib"
use lib qw{ ./t/lib };
endsnippet

use lib qw{ ./t/lib };
endsnippet

snippet tmeths "tmeths"
$ENV{TEST_METHOD} = '${1:regex}';
endsnippet

$ENV{TEST_METHOD} = '${1:regex}';
endsnippet

snippet trunner "trunner"
use ${1:test_class};
$1->runtests();
endsnippet

use ${1:test_class};
$1->runtests();
endsnippet

snippet tsub "tsub"
sub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {
	my $self = shift;
	${4:#  body}
}
endsnippet

sub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {
	my $self = shift;
	${4:#  body}
}
endsnippet

snippet trsub "trsub"
test ${1:test_name} => { description => '${2:Description of test.}'} => sub {
	my ($self) = @_;
	${3:# test code}
};
endsnippet

test ${1:test_name} => { description => '${2:Description of test.}'} => sub {
	my ($self) = @_;
	${3:# test code}
};
endsnippet

snippet tprep "tprep"
sub prep${1:number}_${2:test_case} :Test(startup) {
	my $self = shift;
	${4:#  body}
}
endsnippet

sub prep${1:number}_${2:test_case} :Test(startup) {
	my $self = shift;
	${4:#  body}
}
endsnippet

snippet debug_trace "debug_trace"
use Carp; # 'verbose';
# cloak "die"
# warn "warning"
$SIG{'__DIE__'} = sub {
	require Carp; Carp::confess
};
endsnippet


