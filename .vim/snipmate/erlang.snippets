snippet mod "mod"
-module(${1:`!v Filename('', 'my')`}).
-compile([export_all]).
start() ->
    ${2}
stop() ->
    ok.
endsnippet

-module(${1:`!v Filename('', 'my')`}).
-compile([export_all]).
start() ->
    ${2}
stop() ->
    ok.
endsnippet

snippet def "def"
-define(${1:macro}, ${2:body}).${3}
endsnippet

-define(${1:macro}, ${2:body}).${3}
endsnippet

snippet exp "exp"
-export([${1:function}/${2:arity}]).
endsnippet

-export([${1:function}/${2:arity}]).
endsnippet

snippet inc "inc"
-include("${1:file}").${2}
endsnippet

-include("${1:file}").${2}
endsnippet

snippet beh "beh"
-behaviour(${1:behaviour}).${2}
endsnippet

-behaviour(${1:behaviour}).${2}
endsnippet

snippet if "if"
if
    ${1:guard} ->
        ${2:body}
end
endsnippet

if
    ${1:guard} ->
        ${2:body}
end
endsnippet

snippet case "case"
case ${1:expression} of
    ${2:pattern} ->
        ${3:body};
end
endsnippet

case ${1:expression} of
    ${2:pattern} ->
        ${3:body};
end
endsnippet

snippet fun "fun"
fun (${1:Parameters}) -> ${2:body} end${3}
endsnippet

fun (${1:Parameters}) -> ${2:body} end${3}
endsnippet

snippet try "try"
try
    ${1}
catch
    ${2:_:_} -> ${3:got_some_exception}
end
endsnippet

try
    ${1}
catch
    ${2:_:_} -> ${3:got_some_exception}
end
endsnippet

snippet rec "rec"
-record(${1:record}, {
    ${2:field}=${3:value}}).${4}
endsnippet

-record(${1:record}, {
    ${2:field}=${3:value}}).${4}
endsnippet

snippet todo "todo"
%% TODO: ${1}
endsnippet

%% TODO: ${1}
endsnippet

%% TODO: ${1}
endsnippet

%% TODO: ${1}
endsnippet

snippet %d "%d"
%% @doc ${1}
endsnippet

%% @doc ${1}
endsnippet

snippet %e "%e"
%% @end
endsnippet

%% @end
endsnippet

snippet %s "%s"
%% @spec ${1}
endsnippet

%% @spec ${1}
endsnippet

snippet %p "%p"
%% @private
endsnippet

%% @private
endsnippet

snippet application "application"
-module(${1:`!v Filename('', 'my')`}).
-behaviour(application).
-export([start/2, stop/1]).
start(_Type, _StartArgs) ->
    case ${2:root_supervisor}:start_link() of
        {ok, Pid} ->
            {ok, Pid};
        Other ->
	          {error, Other}
    end.
stop(_State) ->
    ok.	
endsnippet

-module(${1:`!v Filename('', 'my')`}).
-behaviour(application).
-export([start/2, stop/1]).
start(_Type, _StartArgs) ->
    case ${2:root_supervisor}:start_link() of
        {ok, Pid} ->
            {ok, Pid};
        Other ->
	          {error, Other}
    end.
stop(_State) ->
    ok.	
endsnippet

snippet supervisor "supervisor"
-module(${1:`!v Filename('', 'my')`}).
-behaviour(supervisor).
%% API
-export([start_link/0]).
%% Supervisor callbacks
-export([init/1]).
-define(SERVER, ?MODULE).
start_link() ->
    supervisor:start_link({local, ?SERVER}, ?MODULE, []).
init([]) ->
    Server = {${2:my_server}, {$2, start_link, []},
      permanent, 2000, worker, [$2]},
    Children = [Server],
    RestartStrategy = {one_for_one, 0, 1},
    {ok, {RestartStrategy, Children}}.
endsnippet

-module(${1:`!v Filename('', 'my')`}).
-behaviour(supervisor).
%% API
-export([start_link/0]).
%% Supervisor callbacks
-export([init/1]).
-define(SERVER, ?MODULE).
start_link() ->
    supervisor:start_link({local, ?SERVER}, ?MODULE, []).
init([]) ->
    Server = {${2:my_server}, {$2, start_link, []},
      permanent, 2000, worker, [$2]},
    Children = [Server],
    RestartStrategy = {one_for_one, 0, 1},
    {ok, {RestartStrategy, Children}}.
endsnippet

snippet gen_server "gen_server"
-module(${1:`!v Filename('', 'my')`}).
-behaviour(gen_server).
%% API
-export([
         start_link/0
        ]).
%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).
-define(SERVER, ?MODULE).
-record(state, {}).
%%%===================================================================
%%% API
%%%===================================================================
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).
%%%===================================================================
%%% gen_server callbacks
%%%===================================================================
init([]) ->
    {ok, #state{}}.
handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.
handle_cast(_Msg, State) ->
    {noreply, State}.
handle_info(_Info, State) ->
    {noreply, State}.
terminate(_Reason, _State) ->
    ok.
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.
%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet


