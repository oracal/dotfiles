snippet ps "ps"
create or replace package ${1:name}
as
	${2:-- spec}
end; -- end of package spec $1
endsnippet

create or replace package ${1:name}
as
	${2:-- spec}
end; -- end of package spec $1
endsnippet

snippet pb "pb"
create or replace package body ${1:name}
as
	${2:-- body}
end; -- end of package body $1;
endsnippet

create or replace package body ${1:name}
as
	${2:-- body}
end; -- end of package body $1;
endsnippet

snippet pps "pps"
procedure ${1:name}(${2:args});
endsnippet

procedure ${1:name}(${2:args});
endsnippet

snippet ppb "ppb"
procedure ${1:name}(${2:args})
as
begin
	${3:-- body}
end $2;
endsnippet

procedure ${1:name}(${2:args})
as
begin
	${3:-- body}
end $2;
endsnippet

snippet pfs "pfs"
function ${1:name}(${2:args})
  return ${3:type};
endsnippet

function ${1:name}(${2:args})
  return ${3:type};
endsnippet

snippet pfb "pfb"
function ${1:name}(${2:args})
  return ${3:type}
as
	l_res	$3;
begin
	${4:-- body};
	return l_res;
end $1;
endsnippet

function ${1:name}(${2:args})
  return ${3:type}
as
	l_res	$3;
begin
	${4:-- body};
	return l_res;
end $1;
endsnippet

snippet err "err"
show errors;
endsnippet

show errors;
endsnippet

snippet p "p"
${1:name} ${2:in} ${3:type} ${4: := null}
endsnippet

${1:name} ${2:in} ${3:type} ${4: := null}
endsnippet

snippet tr "tr"
type tr_${1:name} is record (${2:/* columns */});
endsnippet

type tr_${1:name} is record (${2:/* columns */});
endsnippet

snippet tt "tt"
type tt_${1:name} is table of tr_${2:name};
endsnippet

type tt_${1:name} is table of tr_${2:name};
endsnippet

snippet tti "tti"
type tt_${1:name} is table of tr_${2:name} index by binary_integer;
endsnippet

type tt_${1:name} is table of tr_${2:name} index by binary_integer;
endsnippet

snippet doc "doc"
/*
 *	${1: comment ...}
 */
endsnippet

/*
 *	${1: comment ...}
 */
endsnippet

snippet beg "beg"
begin
	${1}
end;
endsnippet

begin
	${1}
end;
endsnippet

snippet dec "dec"
declare
	${1}
begin
	${2}
end;
endsnippet

declare
	${1}
begin
	${2}
end;
endsnippet

snippet rpipe "rpipe"
for ${1:i} in 1 .. ${2:l_res}.count loop
	pipe row( $2($1) );
end loop;
return;
endsnippet

for ${1:i} in 1 .. ${2:l_res}.count loop
	pipe row( $2($1) );
end loop;
return;
endsnippet

snippet bc "bc"
bulk collect into ${1}
endsnippet

bulk collect into ${1}
endsnippet

snippet l "l"
l_${1}		${2:number};
endsnippet

l_${1}		${2:number};
endsnippet

snippet log "log"
dbms_output.put_line('${1}');
endsnippet

dbms_output.put_line('${1}');
endsnippet

snippet for "for"
for ${1:i} in ${2:1}..${3:42} loop
	${3}
end loop;
endsnippet

for ${1:i} in ${2:1}..${3:42} loop
	${3}
end loop;
endsnippet

snippet fors "fors"
for ${1:rec} in (${2: select}) loop
	${3}
end loop;
endsnippet

for ${1:rec} in (${2: select}) loop
	${3}
end loop;
endsnippet

snippet forc "forc"
for ${1:i} in ${2:l_var}.first .. $2.last loop
	${3: -- dbms_output.put_line($2($1)); }
end loop;
endsnippet

for ${1:i} in ${2:l_var}.first .. $2.last loop
	${3: -- dbms_output.put_line($2($1)); }
end loop;
endsnippet

snippet if "if"
if ${1} then
	${2}
end if;
endsnippet

snippet ife "ife"
if ${1} then
	${2}
else
	${3}
end if;
endsnippet


